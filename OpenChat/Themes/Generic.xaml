<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:OpenChat.Controls"
                    xmlns:local="clr-namespace:OpenChat"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime">

    <sys:Double x:Key="NormalFontSize">14</sys:Double>
    <sys:Double x:Key="SmallFontSize">12</sys:Double>
    <sys:Double x:Key="LargeFontSize">16</sys:Double>
    <sys:Double x:Key="ExtremLargeFontSize">18</sys:Double>
    <CircleEase x:Key="ease" EasingMode="EaseOut" />
    <!-- MainPage页面上方消息通知组件 -->
    <Style TargetType="{x:Type controls:NoteControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NoteControl}">
                    <Border Padding="5,3"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0 0 3 3"
                            RenderTransform="{TemplateBinding ContentRenderTransform}">
                        <TextBlock Text="{TemplateBinding Text}" TextWrapping="Wrap" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 聊天消息组件，展示用户的提问和AI的回复 -->
    <Style TargetType="{x:Type controls:ChatBubble}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ChatBubble}">
                    <StackPanel Margin="0,5" Background="{TemplateBinding Background}">
                        <TextBox HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 Background="{TemplateBinding HeaderBackground}"
                                 BorderThickness="0"
                                 FontSize="{DynamicResource SmallFontSize}"
                                 Foreground="{TemplateBinding HeaderForeground}"
                                 IsReadOnly="True"
                                 Text="{TemplateBinding Username}"
                                 TextWrapping="Wrap" />
                        <Border x:Name="chatBubble" Padding="5" HorizontalAlignment="Stretch"
                                Background="{TemplateBinding ContentBackground}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}">
                            <StackPanel HorizontalAlignment="Stretch">
                                <controls:ConditionalControl Condition="{TemplateBinding IsReadonly}">
                                    <controls:ConditionalControl.ElementWhileTrue>
                                        <controls:MarkdownViewer Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    </controls:ConditionalControl.ElementWhileTrue>
                                    <controls:ConditionalControl.ElementWhileFalse>
                                        <TextBox HorizontalAlignment="Stretch" AcceptsReturn="True" Background="Transparent"
                                                 BorderThickness="0"
                                                 Foreground="{TemplateBinding ContentForeground}"
                                                 Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                 TextWrapping="Wrap" />
                                    </controls:ConditionalControl.ElementWhileFalse>
                                </controls:ConditionalControl>
                            </StackPanel>
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 条件展示组件 -->
    <Style TargetType="{x:Type controls:ConditionalControl}">
        <!-- 指定当控件通过键盘导航(如Tab键)获得焦点时显示的视觉反馈样式,null清除默认样式(高亮边框) -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 通过DataTrigger监听Condition属性的变化 -->
                <!-- 当Condition为True时，elementWhileTrue可见，elementWhileFalse隐藏 -->
                <!-- 当Condition为False时，elementWhileFalse可见，elementWhileTrue隐藏 -->
                <!-- 其实这两个控件可以合成一个 -->
                <ControlTemplate TargetType="{x:Type controls:ConditionalControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ContentPresenter x:Name="elementWhileTrue" Content="{TemplateBinding ElementWhileTrue}">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Condition}" Value="True">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Condition}" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                            <ContentPresenter x:Name="elementWhileFalse" Content="{TemplateBinding ElementWhileFalse}">
                                <ContentPresenter.Style>
                                    <Style TargetType="ContentPresenter">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Condition}" Value="True">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Condition}" Value="False">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Markdown组件 -->
    <Style TargetType="{x:Type controls:MarkdownViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:MarkdownViewer">
                    <ContentControl Content="{TemplateBinding RenderedContent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 圆圈loading -->
    <Style TargetType="{x:Type controls:LoadingCircle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:LoadingCircle">
                    <Viewbox Stretch="Uniform">
                        <UniformGrid Width="75" Height="50" Columns="5">
                            <UniformGrid.Resources>
                                <Style x:Key="rec" TargetType="Rectangle">
                                    <Setter Property="Width" Value="10" />
                                    <Setter Property="Height" Value="30" />
                                    <Setter Property="Margin" Value="2.5,0" />
                                </Style>
                                <PowerEase x:Key="powerEase" EasingMode="EaseInOut" Power="3" />
                                <Storyboard x:Key="animation" RepeatBehavior="Forever" Storyboard.TargetProperty="Height">
                                    <DoubleAnimation AutoReverse="True" BeginTime="0:0:0.0"
                                                     EasingFunction="{StaticResource powerEase}"
                                                     Storyboard.TargetName="rec1" To="50" Duration="0:0:0.3" />
                                    <DoubleAnimation AutoReverse="True" BeginTime="0:0:0.12"
                                                     EasingFunction="{StaticResource powerEase}"
                                                     Storyboard.TargetName="rec2" To="50" Duration="0:0:0.3" />
                                    <DoubleAnimation AutoReverse="True" BeginTime="0:0:0.24"
                                                     EasingFunction="{StaticResource powerEase}"
                                                     Storyboard.TargetName="rec3" To="50" Duration="0:0:0.3" />
                                    <DoubleAnimation AutoReverse="True" BeginTime="0:0:0.36"
                                                     EasingFunction="{StaticResource powerEase}"
                                                     Storyboard.TargetName="rec4" To="50" Duration="0:0:0.3" />
                                    <DoubleAnimation AutoReverse="True" BeginTime="0:0:0.48"
                                                     EasingFunction="{StaticResource powerEase}"
                                                     Storyboard.TargetName="rec5" To="50" Duration="0:0:0.3" />
                                </Storyboard>
                            </UniformGrid.Resources>
                            <UniformGrid.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard Name="animation" Storyboard="{StaticResource animation}" />
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Unloaded">
                                    <StopStoryboard BeginStoryboardName="animation" />
                                </EventTrigger>
                            </UniformGrid.Triggers>

                            <Rectangle Name="rec1" Grid.Column="0"
                                       Fill="{TemplateBinding Foreground}"
                                       Style="{StaticResource rec}" />
                            <Rectangle Name="rec2" Grid.Column="1"
                                       Fill="{TemplateBinding Foreground}"
                                       Style="{StaticResource rec}" />
                            <Rectangle Name="rec3" Grid.Column="2"
                                       Fill="{TemplateBinding Foreground}"
                                       Style="{StaticResource rec}" />
                            <Rectangle Name="rec4" Grid.Column="3"
                                       Fill="{TemplateBinding Foreground}"
                                       Style="{StaticResource rec}" />
                            <Rectangle Name="rec5" Grid.Column="4"
                                       Fill="{TemplateBinding Foreground}"
                                       Style="{StaticResource rec}" />
                        </UniformGrid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
